{"version":3,"sources":["cell.js","setup.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","num","isFree","useState","clicked","setClicked","className","onClick","createTable","table","i","push","nums","Array","from","keys","map","el","j","idx","Math","random","length","splice","App","transposed","_","colIndex","row","cell","col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAceA,MAZf,YAA+B,IAAfC,EAAc,EAAdA,IAAKC,EAAS,EAATA,OAAS,EACIC,oBAAS,GADb,mBACnBC,EADmB,KACVC,EADU,KAO1B,OAAO,qBAAKC,UAAS,oBAAeJ,GAAUE,EAAU,WAAa,IAAMG,QAJvD,WAChBF,GAAYD,IAGT,SACEF,EAAS,OAASD,KCKhBO,MAff,WAEI,IADA,IAAMC,EAAQ,GADM,WAEXC,GACLD,EAAME,KAAK,IAGX,IAFA,IAAMC,EAAOC,MAAMC,KAAKD,MAAM,IAAIE,QAAQC,KAAI,SAAAC,GAAE,OAAIA,EAAK,EAAQ,GAAJP,KAEpDQ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMC,EAAMC,KAAKC,SAAWT,EAAKU,OACjCb,EAAMC,GAAGC,KAAKC,EAAKW,OAAOJ,EAAK,MAN9BT,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAUT,OAAOD,GCkBIe,MA1Bf,WACE,IAAMf,EAAQD,IACRiB,EAAahB,EAAM,GAAGO,KAAI,SAACU,EAAGC,GAAJ,OAAiBlB,EAAMO,KAAI,SAAAY,GAAG,OAAIA,EAAID,SAEtE,OACE,sBAAKrB,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACG,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKU,KAAI,SAAAa,GAC7B,OAAO,qBAAKvB,UAAU,oBAAf,SACJuB,SAINJ,EAAWT,KAAI,SAACc,EAAKpB,GACpB,OAAO,qBAAKJ,UAAU,MAAf,SACFwB,EAAId,KAAI,SAACY,EAAKV,GACb,OAAO,qBAAKZ,UAAU,MAAf,SACH,cAAC,EAAD,CAAgBL,IAAK2B,EAAK1B,QAAQ,GAAvB0B,SAHd,cAAiClB,WCNjCqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8a83155c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction Cell ({num, isFree}) {\r\n    const [clicked, setClicked] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        setClicked(!clicked);\r\n    }\r\n\r\n    return <div className={`bingo-cell${isFree || clicked ? \" clicked\" : \"\"}`} onClick={handleClick}>\r\n            {isFree ? \"Free\" : num}\r\n        </div>\r\n}\r\n\r\nexport default Cell;","function createTable () {\r\n    const table = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        table.push([]);\r\n        const nums = Array.from(Array(15).keys()).map(el => el + 1 + i * 15);\r\n\r\n        for (let j = 0; j < 5; j++) {\r\n            const idx = Math.random() * nums.length;\r\n            table[i].push(nums.splice(idx, 1));\r\n        }\r\n    }\r\n\r\n    return table;\r\n}\r\n\r\nexport default createTable;","import './App.css';\nimport Cell from \"./cell\";\nimport createTable from \"./setup\";\n\nfunction App() {\n  const table = createTable();\n  const transposed = table[0].map((_, colIndex) => table.map(row => row[colIndex]));\n\n  return (\n    <div className=\"App\">\n      <div className=\"col header\">\n        {[\"B\", \"I\", \"N\", \"G\", \"O\"].map(cell => {\n          return <div className=\"bingo-cell header\">\n            {cell}\n            </div>\n        })}\n      </div>\n      {transposed.map((col, i) => {\n        return <div className=\"col\" key={`col-${i}`}>\n            {col.map((row, j) => {\n              return <div className=\"row\">\n                  <Cell key={row} num={row} isFree={false && i === 2 && j === 2}/>\n                </div>\n            })}\n          </div>\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}